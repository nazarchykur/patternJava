Відвідувач — це поведінковий патерн проектування, що дає змогу додавати до програми нові операції, 
             не змінюючи класи об’єктів, над якими ці операції можуть виконуватися.


============================================================================================

 Структура:
 ----------
 
 1)  Відвідувач описує спільний для всіх типів відвідувачів інтерфейс. Він оголошує набір методів, 
     що відрізняються типом вхідного параметра. Кожному класу конкретних елементів повинен підходити свій метод. 
     В мовах, які підтримують перевантаження методів, ці методи можуть мати однакові імена, але типи їхніх параметрів повинні відрізнятися.
 
 2) Конкретні відвідувачі реалізують якусь особливу поведінку для всіх типів елементів, 
      які можна подати через методи інтерфейсу відвідувача.
      
3) Елемент описує метод прийому відвідувача. Цей метод повинен мати лише один параметр, оголошений з 
      типом загального інтерфейсу відвідувачів.
      
4) Конкретні елементи реалізують методи приймання відвідувача. Мета цього методу — викликати той метод відвідування, 
    який відповідає типу цього елемента. Так відвідувач дізнається, з яким типом елементу він працює.
    
5) Клієнтом зазвичай виступає колекція або складний складовий об’єкт, наприклад, дерево Компонувальника. 
    Здебільшого, клієнт не прив’язаний до конкретних класів елементів, працюючи з ними через загальний інтерфейс елементів.    
    
    
 =======================================================================================================================
 
  Застосування:
  --------------
  !- Якщо вам потрібно виконати якусь операцію над усіма елементами складної структури об’єктів, наприклад, деревом.   
  *- Відвідувач дозволяє застосовувати одну і ту саму операцію до об’єктів різних класів.
--------------    
  !- Якщо над об’єктами складної структури об’єктів потрібно виконувати деякі не пов’язані між собою операції, 
       але ви не хочете «засмічувати» класи такими операціями.
  *- Відвідувач дозволяє витягти споріднені операції з класів, що складають структуру об’єктів, помістивши їх до 
       одного класу-відвідувача. Якщо структура об’єктів використовується в декількох програмах, то патерн дозволить 
       кожній програмі мати тільки потрібні в ній операції.
--------------
  !-  Якщо нова поведінка має сенс тільки для деяких класів з існуючої ієрархії.
  *-  Відвідувач дозволяє визначити поведінку тільки для цих класів, залишивши її порожньою для всіх інших.
         
         
========================================================================================================================    
Кроки реалізації:
-----------------
1) Створіть інтерфейс відвідувача й оголосіть у ньому методи «відвідування» для кожного класу елемента, який існує в програмі.

2) Опишіть інтерфейс елементів. Якщо ви працюєте з уже існуючими класами, оголосіть абстрактний метод прийняття 
     відвідувачів у базовому класі ієрархії елементів.

3) Реалізуйте методи прийняття в усіх конкретних елементах. Вони повинні переадресовувати виклики тому методу 
     відвідувача, в якому тип параметра збігається з поточним класом елемента.

4) Ієрархія елементів повинна знати тільки про загальний інтерфейс відвідувачів. З іншого боку, відвідувачі 
    знатимуть про всі класи елементів.

5) Для кожної нової поведінки створіть свій власний конкретний клас. Пристосуйте цю поведінку для роботи з усіма 
     наявними типами елементів, реалізувавши всі методи інтерфейсу відвідувачів.

6) Клієнт створюватиме об’єкти відвідувачів, а потім передаватиме їх елементам через метод прийняття.     