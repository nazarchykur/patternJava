Команда:
        Також відомий як: Дія, Транзакція, Action, Command


Суть патерна:
        Команда — це поведінковий патерн проектування, який перетворює запити на об’єкти,
        дозволяючи передавати їх як аргументи під час виклику методів, ставити запити в чергу,
        логувати їх, а також підтримувати скасування операцій.

Рішення:
        Хороші програми зазвичай структурують у вигляді шарів. Найпоширеніший приклад — це шари
        користувацького інтерфейсу та бізнес-логіки. Перший лише малює гарне зображення для користувача,
        але коли потрібно зробити щось важливе, інтерфейс користувача «просить» шар бізнес-логіки
        зайнятися цим.

        У дійсності це виглядає так: один з об’єктів інтерфейсу користувача викликає метод одного
        з об’єктів бізнес-логіки, передаючи до нього якісь параметри.

        Патерн Команда пропонує більше не надсилати такі виклики безпосередньо. Замість цього кожен виклик,
        що відрізняється від інших, слід завернути у власний клас з єдиним методом, який і здійснюватиме
        виклик => команда.

        До об’єкта інтерфейсу можна буде прив’язати об’єкт команди, який знає, кому і в якому вигляді
        слід відправляти запити. Коли об’єкт інтерфейсу буде готовий передати запит, він викличе метод
        команди, а та — подбає про все інше.

        Класи команд можна об’єднати під загальним інтерфейсом, що має єдиний метод запуску команди.
        Після цього одні й ті самі відправники зможуть працювати з різними командами, не прив’язуючись
        до їхніх класів. Навіть більше, команди можна буде взаємозаміняти «на льоту», змінюючи підсумкову
        поведінку відправників.

        Параметри, з якими повинен бути викликаний метод об’єкта одержувача, можна заздалегідь зберегти
        в полях об’єкта-команди. Завдяки цьому, об’єкти, які надсилають запити, можуть не турбуватися
        про те, щоб зібрати необхідні дані для одержувача. Навіть більше, вони тепер взагалі не знають,
        хто буде одержувачем запиту. Вся ця інформація прихована всередині команди.


Структура:
        1) Відправник зберігає посилання на об’єкт команди та звертається до нього, коли потрібно виконати
           якусь дію. Відправник працює з командами тільки через їхній загальний інтерфейс. Він не знає,
           яку конкретно команду використовує, оскільки отримує готовий об’єкт команди від клієнта.

        2) Команда описує інтерфейс, спільний для всіх конкретних команд. Зазвичай тут описується лише
           один метод запуску команди.

        3) Конкретні команди реалізують різні запити, дотримуючись загального інтерфейсу команд. Як правило,
           команда не робить всю роботу самостійно, а лише передає виклик одержувачу, яким виступає один з
           об’єктів бізнес-логіки.

           Параметри, з якими команда звертається до одержувача, необхідно зберігати у вигляді полів.
           У більшості випадків об’єкти команд можна зробити незмінними, передаючи у них всі необхідні
           параметри тільки через конструктор.

        4) Одержувач містить бізнес-логіку програми. У цій ролі може виступати практично будь-який об’єкт.
           Зазвичай, команди перенаправляють виклики одержувачам, але іноді, щоб спростити програму,
           ви можете позбутися від одержувачів, «зливши» їхній код у класи команд.

        5) Клієнт створює об’єкти конкретних команд, передаючи до них усі необхідні параметри, серед яких
           можуть бути і посилання на об’єкти одержувачів. Після цього клієнт зв’язує об’єкти відправників
           зі створеними командами.



Застосування:
       + Якщо ви хочете параметризувати об’єкти виконуваною дією.
            - Команда перетворює операції на об’єкти, а об’єкти, у свою чергу, можна передавати, зберігати
              та взаємозаміняти всередині інших об’єктів.

       + Якщо ви хочете поставити операції в чергу, виконувати їх за розкладом або передавати мережею.

       + Якщо вам потрібна операція скасування.
            - Головна річ, яка потрібна для того, щоб мати можливість скасовувати операції — це зберігання
              історії. Серед багатьох способів реалізації цієї можливості патерн Команда є, мабуть,
              найпопулярнішим.

            - Історія команд виглядає як стек, до якого потрапляють усі виконані об’єкти команд. Кожна команда перед 
                виконанням операції зберігає поточний стан об’єкта, з яким вона працюватиме. Після виконання операції 
                копія команди потрапляє до стеку історії, продовжуючи нести у собі збережений стан об’єкта. Якщо 
                знадобиться скасування, програма візьме останню команду з історії та відновить збережений у ній стан.
              
              Цей спосіб має дві особливості. По-перше, точний стан об’єктів не дуже просто зберегти, адже його частина 
              може бути приватною. Вирішити це можна за допомогою патерна Знімок.
              
              По-друге, копії стану можуть займати досить багато оперативної пам’яті. Тому іноді можна вдатися до 
              альтернативної реалізації, тобто замість відновлення старого стану, команда виконає зворотню дію. 
              Недолік цього способу у складності (іноді неможливості) реалізації зворотньої дії.
              


Кроки реалізації:
        1)  Створіть загальний інтерфейс команд і визначте в ньому метод запуску.

        2) Один за одним створіть класи конкретних команд. У кожному класі має бути поле для
           зберігання посилання на один або декілька об’єктів-одержувачів, яким команда перенаправлятиме
           основну роботу.

           Крім цього, команда повинна мати поля для зберігання параметрів, потрібних під час виклику
           методів одержувача. Значення всіх цих полів команда повинна отримувати через конструктор.

           І, нарешті, реалізуйте основний метод команди, викликаючи в ньому ті чи інші методи одержувача.

        3) Додайте до класів відправників поля для зберігання команд. Зазвичай об’єкти-відправники приймають
           готові об’єкти команд ззовні — через конструктор або через сетер поля команди.

        4) Змініть основний код відправників так, щоб вони делегували виконання дії команді.

        5) Порядок ініціалізації об’єктів повинен виглядати так:
            - Створюємо об’єкти одержувачів.
            - Створюємо об’єкти команд, зв’язавши їх з одержувачами.
            - Створюємо об’єкти відправників, зв’язавши їх з командами.



Переваги та недоліки
    + Прибирає пряму залежність між об’єктами, що викликають операції, та об’єктами, які їх безпосередньо виконують.
    + Дозволяє реалізувати просте скасування і повтор операцій.
    + Дозволяє реалізувати відкладений запуск операцій.
    + Дозволяє збирати складні команди з простих.
    + Реалізує принцип відкритості/закритості.
    
    - Ускладнює код програми внаслідок введення великої кількості додаткових класів.
 
 
 
Відносини з іншими патернами:

    > Ланцюжок обов’язків, Команда, Посередник та Спостерігач показують різні способи роботи тих, хто надсилає запити, 
        та тих, хто їх отримує:

        + Ланцюжок обов’язків передає запит послідовно через ланцюжок потенційних отримувачів, очікуючи, що один з них 
            обробить запит.

        + Команда встановлює непрямий односторонній зв’язок від відправників до одержувачів.

        + Посередник прибирає прямий зв’язок між відправниками та одержувачами, змушуючи їх спілкуватися опосередковано, 
            через себе.

        + Спостерігач передає запит одночасно всім зацікавленим одержувачам, але дозволяє їм динамічно підписуватися або 
            відписуватися від таких повідомлень.

    > Обробники в Ланцюжкові обов’язків можуть бути виконані у вигляді Команд. В цьому випадку роль запиту відіграє 
        контекст команд, який послідовно подається до кожної команди у ланцюгу.
    
        Але є й інший підхід, в якому сам запит є Командою, надісланою ланцюжком об’єктів. У цьому випадку одна і та сама 
        операція може бути застосована до багатьох різних контекстів, представлених у вигляді ланцюжка.
    
    > Команду та Знімок можна використовувати спільно для реалізації скасування операцій. У цьому випадку об’єкти команд 
        відповідатимуть за виконання дії над об’єктом, а знімки зберігатимуть резервну копію стану цього об’єкта, зроблену 
        перед запуском команди.
    
    > Команда та Стратегія схожі за принципом, але відрізняються масштабом та застосуванням:
    
        + Команду використовують для перетворення будь-яких різнорідних дій на об’єкти. Параметри операції перетворюються 
            на поля об’єкта. Цей об’єкт тепер можна логувати, зберігати в історії для скасування, передавати у зовнішні сервіси тощо.
            
        + З іншого боку, Стратегія описує різні способи того, як зробити одну і ту саму дію, дозволяючи замінювати ці 
            способи в якомусь об’єкті контексту прямо під час виконання програми.
            
    > Якщо Команду потрібно копіювати перед вставкою в історію виконаних команд, вам може допомогти Прототип.
    
    > Відвідувач можна розглядати як розширений аналог Команди, що здатен працювати відразу з декількома видами одержувачів.
