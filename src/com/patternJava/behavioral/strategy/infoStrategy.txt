
1) Контекст зберігає посилання на загальний інтерфейс стратегій.
2) Стратегія визначає інтерфейс, спільний для всіх варіацій алгоритму. Контекст використовує цей інтерфейс для виклику алгоритму.
   Для контексту неважливо, яка саме варіація алгоритму буде обрана, оскільки всі вони мають однаковий інтерфейс.
   
3) Конкретні стратегії реалізують різні варіації алгоритму.
4) Клієнт повинен створити об’єкт конкретної стратегії та передати його до конструктора контексту. 
   Крім того, клієнт повинен мати можливість замінити стратегію на льоту, використовуючи сетер поля стратегії. 
   Завдяки цьому, контекст не знатиме про те, яку саме стратегію зараз обрано.
   
   
=================================================================================================
 Застосування:
 -------------
  ! - Якщо вам потрібно використовувати різні варіації якого-небудь алгоритму всередині одного об’єкта.
  
  * - Стратегія дозволяє варіювати поведінку об’єкта під час виконання програми, підставляючи до нього різні об’єкти-поведінки
  
-------  
  
   ! - Якщо у вас є безліч схожих класів, які відрізняються лише деякою поведінкою.
   * - Стратегія дозволяє відокремити поведінку, що відрізняється, у власну ієрархію класів, 
       а потім звести початкові класи до одного, налаштовуючи його поведінку стратегіями.
       
-------  
  
   ! - Якщо ви не хочете оголювати деталі реалізації алгоритмів для інших класів.
   * - Стратегія дозволяє ізолювати код, дані й залежності алгоритмів від інших об’єктів, приховавши ці деталі всередині класів-стратегій.
   
   
-------  
  
   ! - Якщо різні варіації алгоритмів реалізовано у вигляді розлогого умовного оператора. Кожна гілка такого оператора є варіацією алгоритму.
   * - Стратегія розміщує кожну лапу такого оператора до окремого класу-стратегії. Потім контекст отримує певний 
       об’єкт-стратегію від клієнта й делегує йому роботу. Якщо раптом знадобиться змінити алгоритм, до контексту можна подати іншу стратегію.
       
       
========================================================================================================
Кроки реалізації:
------------------
1) Визначте алгоритм, що схильний до частих змін. Також підійде алгоритм, який має декілька варіацій, 
   які обираються під час виконання програми.

2) Створіть інтерфейс стратегій, що описує цей алгоритм. Він повинен бути спільним для всіх варіантів алгоритму.

3) Помістіть варіації алгоритму до власних класів, які реалізують цей інтерфейс.

4) У класі контексту створіть поле для зберігання посилання на поточний об’єкт-стратегію, а також метод для її зміни. 
   Переконайтеся в тому, що контекст працює з цим об’єктом тільки через загальний інтерфейс стратегій.

5) Клієнти контексту мають подавати до нього відповідний об’єкт-стратегію, коли хочуть, щоб контекст поводився певним чином.       