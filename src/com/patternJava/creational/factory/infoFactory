
1) Продукт визначає загальний інтерфейс об’єктів, які може створювати творець та його підкласи.
2) Конкретні продукти відрізнятимуться реалізацією, але інтерфейс у них буде спільним.
3) Творець оголошує фабричний метод, який має повертати нові об’єкти продуктів. 
Важливо, щоб тип результату цього методу співпадав із загальним інтерфейсом продуктів.
   
   Зазвичай, фабричний метод оголошують абстрактним, щоб змусити всі підкласи реалізувати його по-своєму. 
   Однак він може також повертати продукт за замовчуванням.
   
   Незважаючи на назву, важливо розуміти, що створення продуктів не є єдиною і головною функцією творця. 
   Зазвичай він містить ще й інший корисний код для роботи з продуктом. 
   
4) Конкретні творці по-своєму реалізують фабричний метод, виробляючи ті чи інші конкретні продукти.
   
   Фабричний метод не зобов’язаний створювати нові об’єкти увесь час. 
   Його можна переписати так, аби повертати з якогось сховища або кешу вже існуючі об’єкти.
   
   
====================================================================================================

   Застосування:
   -------------
     ! - Коли типи і залежності об’єктів, з якими повинен працювати ваш код, невідомі заздалегідь.
   
     * - Фабричний метод відокремлює код виробництва продуктів від решти коду, який використовує ці продукти.
        Завдяки цьому код виробництва можна розширювати, не зачіпаючи основний код. 
   
     ! - Коли ви хочете зекономити системні ресурси, повторно використовуючи вже створені об’єкти, замість породження нових.
     
     * - Така проблема зазвичай виникає під час роботи з «важкими», вимогливими до ресурсів об’єктами, 
         такими, як підключення до бази даних, файлової системи й подібними.
         
     Кроки реалізації:
     -----------------
     1) Приведіть усі створювані продукти до загального інтерфейсу.
     
     2) Створіть порожній фабричний метод у класі, який виробляє продукти. 
        В якості типу, що повертається, вкажіть загальний інтерфейс продукту.
     
     3) Пройдіться по коду класу й знайдіть усі ділянки, що створюють продукти. По черзі замініть 
        ці ділянки викликами фабричного методу, переносячи в нього код створення різних продуктів.
     
        Можливо, доведеться додати до фабричного методу декілька параметрів, що контролюють, який з продуктів потрібно створити.
     
     4)  Для кожного типу продуктів заведіть підклас і перевизначте в ньому фабричний метод. 
        З суперкласу перемістіть туди код створення відповідного продукту.
     
     5) Якщо створюваних продуктів занадто багато для існуючих підкласів творця, ви можете подумати про введення 
         параметрів до фабричного методу, аби повертати різні продукти в межах одного підкласу.
         
     6) Якщо після цих всіх переміщень фабричний метод став порожнім, можете зробити його абстрактним. 
        Якщо ж у ньому щось залишилося — не страшно, це буде його типовою реалізацією (за замовчуванням).    