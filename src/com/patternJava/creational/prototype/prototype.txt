Прототип
    Також відомий як: Клон, Prototype
    
    
    
     Суть патерна
        Прототип — це породжувальний патерн проектування, що дає змогу копіювати об’єкти, не вдаючись у подробиці їхньої реалізації.
        
        
        
     Проблема
         У вас є об’єкт, який потрібно скопіювати. Як це зробити? Потрібно створити порожній об’єкт того самого класу, 
         а потім по черзі копіювати значення всіх полів зі старого об’єкта до нового.
         
         Чудово! Проте є нюанс. Не кожен об’єкт вдасться скопіювати у такий спосіб, адже частина його стану може бути 
         приватною, а значить — недоступною для решти коду програми.
        
         Є й інша проблема. Код, що копіює, стане залежним від класів об’єктів, які він копіює. Адже, щоб перебрати усі 
         поля об’єкта, потрібно прив’язатися до його класу. Тому ви не зможете копіювати об’єкти, знаючи тільки їхні 
         інтерфейси, але не їхні конкретні класи.
     
     
     
     Рішення
         Патерн Прототип доручає процес копіювання самим об’єктам, які треба скопіювати. Він вводить загальний інтерфейс 
         для всіх об’єктів, що підтримують клонування. Це дозволяє копіювати об’єкти, не прив’язуючись до їхніх конкретних 
         класів. Зазвичай такий інтерфейс має всього один метод — clone.
         
         Реалізація цього методу в різних класах дуже схожа. Метод створює новий об’єкт поточного класу й копіює в нього 
         значення всіх полів власного об’єкта. Таким чином можна скопіювати навіть приватні поля.
         
         Об’єкт, який копіюють, називається прототипом (звідси і назва патерна). Коли об’єкти програми містять сотні полів 
         і тисячі можливих конфігурацій, прототипи можуть слугувати своєрідною альтернативою створенню підкласів.
         
         У цьому випадку всі можливі прототипи готуються і налаштовуються на етапі ініціалізації програми. Потім, коли 
         програмі буде потрібний новий об’єкт, вона створить копію з попередньо заготовленого прототипа.
     
     
     
     Структура
        1. Інтерфейс прототипів описує операції клонування. Для більшості випадків — це єдиний метод clone.
        2. Конкретний прототип реалізує операцію клонування самого себе. Крім звичайного копіювання значень усіх полів, 
            тут можуть бути приховані різноманітні складнощі, про які клієнту не потрібно знати. Наприклад, клонування 
            пов’язаних об’єктів, розплутування рекурсивних залежностей та інше.
        3. Клієнт створює копію об’єкта, звертаючись до нього через загальний інтерфейс прототипів.
     
     
     
     
     
     Застосування
      + Коли ваш код не повинен залежати від класів об’єктів, призначених для копіювання.
     
      > Таке часто буває, якщо ваш код працює з об’єктами, поданими ззовні через який-небудь загальний інтерфейс. Ви не 
        зможете прив’язатися до їхніх класів, навіть якби захотіли, тому що конкретні класи об’єктів невідомі.
     
        Патерн Прототип надає клієнту загальний інтерфейс для роботи з усіма прототипами. Клієнту не потрібно залежати 
        від усіх класів об’єктів, призначених для копіювання, а тільки від інтерфейсу клонування.
      
      
      +  Коли ви маєте безліч підкласів, які відрізняються початковими значеннями полів. Хтось міг створити усі ці класи 
         для того, щоб мати легкий спосіб породжувати об’єкти певної конфігурації.
      
      > Патерн Прототип пропонує використовувати набір прототипів замість створення підкласів для опису популярних 
        конфігурацій об’єктів.
      
        Таким чином, замість породження об’єктів з підкласів ви копіюватимете існуючі об’єкти-прототипи, внутрішній стан 
        яких вже налаштовано. Це дозволить уникнути вибухоподібного зростання кількості класів програми й зменшити її складність.
      
      
      
    Переваги та недоліки
       + Дозволяє клонувати об’єкти без прив’язки до їхніх конкретних класів.
       + Менша кількість повторювань коду ініціалізації об’єктів.
       + Прискорює створення об’єктів.
       + Альтернатива створенню підкласів під час конструювання складних об’єктів.
         
       - Складно клонувати складові об’єкти, що мають посилання на інші об’єкти.
       
    
    Відносини з іншими патернами
        Багато архітектур починаються із застосування Фабричного методу (простішого та більш розширюваного за допомогою 
        підкласів) та еволюціонують у бік Абстрактної фабрики, Прототипу або Будівельника (гнучкіших, але й складніших).
        
        Класи Абстрактної фабрики найчастіше реалізуються за допомогою Фабричного методу, хоча вони можуть бути 
        побудовані і на основі Прототипу.
        
        Якщо Команду потрібно копіювати перед вставкою в історію виконаних команд, вам може допомогти Прототип.
        
        Архітектура, побудована на Компонувальниках та Декораторах, часто може поліпшуватися за рахунок впровадження 
        Прототипу. Він дозволяє клонувати складні структури об’єктів, а не збирати їх заново.
        
        Прототип не спирається на спадкування, але йому потрібна складна операція ініціалізації. Фабричний метод, навпаки, 
        побудований на спадкуванні, але не вимагає складної ініціалізації.
        
        Знімок іноді можна замінити Прототипом, якщо об’єкт, чий стан потрібно зберігати в історії, досить простий, 
        не має посилань на зовнішні ресурси або їх можна легко відновити.
        
        Абстрактна фабрика, Будівельник та Прототип можуть реалізовуватися за допомогою Одинака.
       